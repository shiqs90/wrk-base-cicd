version: '3.8'

services:
  # Base infrastructure services
  wrk-ork:
    build:
      context: .
      dockerfile: Dockerfile.wrk-ork
    container_name: wrk-ork
    environment:
      - NODE_ENV=development
      - CLUSTER=1
    networks:
      - wrk-network
    volumes:
      - ./wrk-ork/config:/app/wrk-ork/config
      - ./wrk-ork/facs:/app/wrk-ork/facs
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node worker.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Book management service
  wrk-book:
    build:
      context: .
      dockerfile: Dockerfile.wrk-book
    container_name: wrk-book
    environment:
      - NODE_ENV=development
      - RACK_ID=book-rack-001
    depends_on:
      wrk-ork:
        condition: service_healthy
    networks:
      - wrk-network
    volumes:
      - ./wrk-book/config:/app/wrk-book/config
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node worker.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # HTTP API Gateway
  app-node:
    build:
      context: .
      dockerfile: Dockerfile.app-node
    container_name: app-node
    environment:
      - NODE_ENV=production
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      wrk-ork:
        condition: service_healthy
    networks:
      - wrk-network
    volumes:
      - ./app-node/config:/app/app-node/config
      - ./app-node/db:/app/app-node/db
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - wrk-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - wrk-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  wrk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
  grafana_data: