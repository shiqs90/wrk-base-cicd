version: '3.8'

services:
  # Base infrastructure services
  wrk-ork:
    build:
      context: .
      dockerfile: Dockerfile.wrk-ork
    platform: linux/arm64
    container_name: wrk-ork
    environment:
      - NODE_ENV=development
      - CLUSTER=1
      - STORE_PRIMARY_KEY=ork-store-key-123
      - DHT_BOOTSTRAP_TIMEOUT=15000
      - RPC_TIMEOUT=20000
      - NETWORK_TIMEOUT=30000
    networks:
      - wrk-network
    ports:
      - "8080:8080"
    volumes:
      - ./wrk-ork/config:/app/wrk-ork/config
      - ./wrk-ork/facs:/app/wrk-ork/facs
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Book management service
  wrk-book:
    build:
      context: .
      dockerfile: Dockerfile.wrk-book
    platform: linux/arm64
    container_name: wrk-book
    environment:
      - NODE_ENV=development
      - RACK_ID=book-rack-001
      - STORE_PRIMARY_KEY=book-store-key-123
      - DHT_BOOTSTRAP_TIMEOUT=15000
      - RPC_TIMEOUT=20000
      - NETWORK_TIMEOUT=30000
    networks:
      - wrk-network
    ports:
      - "8081:8081"
    volumes:
      - ./wrk-book/config:/app/wrk-book/config
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # HTTP API Gateway
  app-node:
    build:
      context: .
      dockerfile: Dockerfile.app-node
    platform: linux/arm64
    container_name: app-node
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - RACK_ID=app-node-rack
      - STORE_PRIMARY_KEY=app-store-key-123
      - DHT_BOOTSTRAP_TIMEOUT=15000
      - RPC_TIMEOUT=20000
      - NETWORK_TIMEOUT=30000
    ports:
      - "3000:3000"
    networks:
      - wrk-network
    volumes:
      - ./app-node/config:/app/app-node/config
      - ./app-node/db:/app/app-node/db
      - ./app-node/config/facs:/app/app-node/config/facs
    healthcheck:
      test: ["CMD", "node", "-e", "require('net').connect(3000, 'localhost').on('connect', () => process.exit(0)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - wrk-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - wrk-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Infrastructure monitoring
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - wrk-network
    restart: unless-stopped
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8082:8080"          # avoid clashing with wrk-ork:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - wrk-network
    restart: unless-stopped

  blackbox:
    image: prom/blackbox-exporter:latest
    container_name: blackbox
    ports:
      - "9115:9115"
    networks:
      - wrk-network
    restart: unless-stopped


networks:
  wrk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  prometheus_data:
  grafana_data: